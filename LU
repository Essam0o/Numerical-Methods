using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MathNet.Numerics;
using MathNet.Symbolics;


namespace Numerical_Project.New_Numerical_methods
{
    public partial class LU_Decomposition : Form
    {
        public LU_Decomposition()
        {
            InitializeComponent();
        }

        private void M00_TextChanged(object sender, EventArgs e)
        {

        }

        private void M01_TextChanged(object sender, EventArgs e)
        {

        }

        private void M02_TextChanged(object sender, EventArgs e)
        {

        }

        private void M03_TextChanged(object sender, EventArgs e)
        {

        }

        private void M10_TextChanged(object sender, EventArgs e)
        {

        }

        private void M11_TextChanged(object sender, EventArgs e)
        {

        }

        private void M12_TextChanged(object sender, EventArgs e)
        {

        }

        private void M13_TextChanged(object sender, EventArgs e)
        {

        }

        private void M20_TextChanged(object sender, EventArgs e)
        {

        }

        private void M21_TextChanged(object sender, EventArgs e)
        {

        }

        private void M22_TextChanged(object sender, EventArgs e)
        {

        }

        private void M23_TextChanged(object sender, EventArgs e)
        {

        }

        private void M00_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M01_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M02_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M03_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M10_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M11_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M12_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M13_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M20_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M21_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M22_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void M23_Copy_TextChanged(object sender, EventArgs e)
        {

        }

        private void X1output_TextChanged(object sender, EventArgs e)
        {

        }

        private void X2output_TextChanged(object sender, EventArgs e)
        {

        }

        private void X3output_TextChanged(object sender, EventArgs e)
        {

        }


        private void CalcualteBTN_Click(object sender, EventArgs e)
        {

            double[,] m = new double[3, 4];


            m[0, 0] = double.Parse(M00.Text);
            m[0, 1] = double.Parse(M01.Text);
            m[0, 2] = double.Parse(M02.Text);
            m[0, 3] = double.Parse(M03.Text);
            m[1, 0] = double.Parse(M10.Text);
            m[1, 1] = double.Parse(M11.Text);
            m[1, 2] = double.Parse(M12.Text);
            m[1, 3] = double.Parse(M13.Text);
            m[2, 0] = double.Parse(M20.Text);
            m[2, 1] = double.Parse(M21.Text);
            m[2, 2] = double.Parse(M22.Text);
            m[2, 3] = double.Parse(M23.Text);

            double m21 = m[1, 0] / m[0, 0];
            double m31 = m[2, 0] / m[0, 0];
            //rule E2-(m21)E1 = E2
            for (int j = 0; j < 4; j++)
            {
                double e2 = m[1, j];
                double e1 = ((m21) * m[0, j]);
                m[1, j] = e2 - e1;
            }
            //rule E3-(m31)E1 = E3
            for (int j = 0; j < 4; j++)
            {
                double e3 = m[2, j];
                double e1 = ((m31) * m[0, j]);
                m[2, j] = e3 - e1;
            }
            double m32 = m[2, 1] / m[1, 1];
            //rule E3-(m32)E2 = E3
            for (int j = 0; j < 4; j++)
            {
                double e3 = m[2, j];
                double e1 = ((m32) * m[1, j]);
                m[2, j] = e3 - e1;
            }

            double[,] u = new double[3, 3];
            double[] b = new double[3];
            for (int i = 0; i < 3; i++)
            {
                b[i] = m[i, 3];
            }

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    u[i, j] = m[i, j];
                }
            }

            double[,] l = new double[3, 3];
            l[0, 1] = 0;
            l[0, 2] = 0;
            l[1, 2] = 0;
            l[0, 0] = 1;
            l[1, 1] = 1;
            l[2, 2] = 1;
            l[1, 0] = m21;
            l[2, 0] = m31;
            l[2, 1] = m32;



            //lc=b
            double c1 = b[0] / l[0, 0];
            double c2 = (b[1] - (l[1, 0] * c1)) / l[1, 1];
            double c3 = (b[2] - ((l[2, 0] * c1) + (l[2, 1] * c2))) / l[2, 2];


            M00_Copy1.Text = l[0, 0].ToString();
            M01_Copy1.Text = l[0, 1].ToString();
            M02_Copy1.Text = l[0, 2].ToString();
            M10_Copy1.Text = l[1, 0].ToString();
            M11_Copy1.Text = l[1, 1].ToString();
            M12_Copy1.Text = l[1, 2].ToString();
            M20_Copy1.Text = l[2, 0].ToString();
            M21_Copy1.Text = l[2, 1].ToString();
            M22_Copy1.Text = l[2, 2].ToString();


            C1output.Text = c1.ToString();
            C2output.Text = c2.ToString();
            C3output.Text = c3.ToString();
            //ux=c
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    m[i, j] = u[i, j];
                }
            }


            double x3 = m[2, 3] / m[2, 2];
            double x2 = (m[1, 3] - (m[1, 2] * x3)) / m[1, 1];
            double x1 = (m[0, 3] - ((m[0, 1] * x2) + (m[0, 2] * x3))) / m[0, 0];

            M00_Copy.Text = u[0, 0].ToString();
            M01_Copy.Text = u[0, 1].ToString();
            M02_Copy.Text = u[0, 2].ToString();
            M10_Copy.Text = u[1, 0].ToString();
            M11_Copy.Text = u[1, 1].ToString();
            M12_Copy.Text = u[1, 2].ToString();
            M20_Copy.Text = u[2, 0].ToString();
            M21_Copy.Text = u[2, 1].ToString();
            M22_Copy.Text = u[2, 2].ToString();



            X1output.Text = x1.ToString();
            X2output.Text = x2.ToString();
            X3output.Text = x3.ToString();
        }
    }
}
